###############################################################################
#
# IAR C/C++ Compiler V7.20.1.997/W32 for MSP430           15/Dec/2020  17:59:57
# Copyright 1996-2020 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.20
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\19196\OneDrive\Documents\ECE 306
#        current\Project_10\interrupt_timers.c
#    Command line  =  
#        -f C:\Users\19196\AppData\Local\Temp\EWBEC6.tmp
#        ("C:\Users\19196\OneDrive\Documents\ECE 306
#        current\Project_10\interrupt_timers.c" -lC
#        "C:\Users\19196\OneDrive\Documents\ECE 306
#        current\Project_10\Debug\List" -o
#        "C:\Users\19196\OneDrive\Documents\ECE 306
#        current\Project_10\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FR2355__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\430\lib\dlib\dl430xlsfn.h" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.4\430\" --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\19196\OneDrive\Documents\ECE 306
#        current\Project_10\Debug\List\interrupt_timers.lst
#    Object file   =  
#        C:\Users\19196\OneDrive\Documents\ECE 306
#        current\Project_10\Debug\Obj\interrupt_timers.r43
#
###############################################################################

C:\Users\19196\OneDrive\Documents\ECE 306 current\Project_10\interrupt_timers.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Interrupt_Timers Routine 
      4          //
      5          //
      6          //  Cody Lane
      7          //  Septermber 2020
      8          //  Built with IAR Embedded Workbench Version: V7.20.1 
      9          //------------------------------------------------------------------------------
     10          
     11          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x700
   \   union <unnamed> _A_ADCCTL0_L
   \                     _A_ADCCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x23a
   \   union <unnamed> _A_PBIE_L
   \                     _A_PBIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x242
   \   union <unnamed> _A_PCOUT_L
   \                     _A_PCOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x382
   \   union <unnamed> _A_TB0CCTL0_L
   \                     _A_TB0CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x384
   \   union <unnamed> _A_TB0CCTL1_L
   \                     _A_TB0CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x394
   \   union <unnamed> _A_TB0CCR1_L
   \                     _A_TB0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x396
   \   union <unnamed> _A_TB0CCR2_L
   \                     _A_TB0CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3ae
   \   union <unnamed> _A_TB0IV_L
   \                     _A_TB0IV_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c4
   \   union <unnamed> _A_TB1CCTL1_L
   \                     _A_TB1CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c6
   \   union <unnamed> _A_TB1CCTL2_L
   \                     _A_TB1CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d2
   \   union <unnamed> _A_TB1CCR0_L
   \                     _A_TB1CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d4
   \   union <unnamed> _A_TB1CCR1_L
   \                     _A_TB1CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d6
   \   union <unnamed> _A_TB1CCR2_L
   \                     _A_TB1CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3ee
   \   union <unnamed> _A_TB1IV_L
   \                     _A_TB1IV_L:
   \   000000                DS8 2
     12          #include  "functions.h"
     13          #include <string.h>
     14          #include  "macros.h"
     15          
     16          extern unsigned int switch_one_debouncing;
     17          extern unsigned int switch_one_debounce_count;
     18          extern unsigned int switch_two_debouncing;
     19          extern unsigned int switch_two_debounce_count;
     20          extern volatile unsigned char update_display;
     21          extern volatile unsigned char display_changed;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     22          extern volatile unsigned int display_update_count = RESET_STATE;
   \                     display_update_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     23          volatile unsigned int timerB0_count = RESET_STATE;
   \                     timerB0_count:
   \   000000                DS8 2
     24          extern volatile char display_state;
     25          extern volatile char speed;
     26          extern volatile unsigned int message_index;
     27          extern volatile unsigned int pb_index;
     28          extern volatile unsigned int transmit_flag;
     29          extern volatile unsigned int change_baud;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     30          volatile unsigned int transmit_pc_count = RESET_STATE;
   \                     transmit_pc_count:
   \   000000                DS8 2
     31          
     32          extern volatile unsigned int IP_get;
     33          extern volatile char main_menu_active;
     34          extern volatile char main_menu_select;
     35          extern volatile char old_display_state;
     36          
     37          extern volatile char SSID_received;
     38          extern volatile char send_nstcp;
     39          
     40          extern volatile char drive_state;
     41          extern volatile unsigned int drive_distance;
     42          extern volatile char iot_command_active;
     43          
     44          extern volatile unsigned int iot_char_received;
     45          extern volatile unsigned int iot_2_pc_transmit;
     46          extern volatile unsigned int pc_char_received;
     47          extern volatile unsigned int pc_2_iot_transmit;
     48          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     49          unsigned int timer1_B2_count = RESET_STATE;
   \                     timer1_B2_count:
   \   000000                DS8 2
     50          extern volatile char course_timer_increment;

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     51          volatile unsigned int course_timer_decimal_count = RESET_STATE;
   \                     course_timer_decimal_count:
   \   000000                DS8 2

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     52          volatile unsigned int course_timer_ones_count = RESET_STATE;
   \                     course_timer_ones_count:
   \   000000                DS8 2
     53          

   \                                 In  segment DATA16_Z, align 2, align-sorted
   \   000000                REQUIRE ?cstart_init_zero
     54          unsigned int timerB0_interrupt_count = RESET_STATE;
   \                     timerB0_interrupt_count:
   \   000000                DS8 2
     55          #pragma vector = TIMER0_B0_VECTOR

   \                                 In  segment ISR_CODE, align 2
     56          __interrupt void Timer0_B0_ISR(void) {
   \                     Timer0_B0_ISR:
     57          	//------------------------------------------------------------------------------
     58          	// TimerB0 0 Interrupt handler
     59          	//----------------------------------------------------------------------------
     60          	// ...... Add What you need happen in the interrupt ......
     61          
     62          	if (timerB0_count < 4) {
   \   000000   A292....     CMP.W   #0x4, &timerB0_count
   \   000004   022C         JC      ??Timer0_B0_ISR_0
     63          		timerB0_count++;
   \   000006   9253....     ADD.W   #0x1, &timerB0_count
     64          	}
     65          	if (timerB0_count == 4) {
   \                     ??Timer0_B0_ISR_0:
   \   00000A   A292....     CMP.W   #0x4, &timerB0_count
   \   00000E   0720         JNE     ??Timer0_B0_ISR_1
     66          		P5OUT |= IOT_RESET;
   \   000010   D2D34202     BIS.B   #0x1, &0x242
     67          		IP_get = TRUE;
   \   000014   9243....     MOV.W   #0x1, &IP_get
     68          		TB0CCTL0 &= ~CCIE;
   \   000018   B2C010008203 BIC.W   #0x10, &0x382
     69          	}
     70          	
     71          
     72          
     73          	
     74          	TB0CCR0 += TB0CCR0_INTERVAL; // Add Offset to TBCCR0
   \                     ??Timer0_B0_ISR_1:
   \   00001E   B250A8619203 ADD.W   #0x61a8, &0x392
     75          		//----------------------------------------------------------------------------
     76          }
   \   000024   0013         RETI
   \   000026                REQUIRE _A_PCOUT_L
   \   000026                REQUIRE _A_TB0CCTL0_L
   \   000026                REQUIRE _A_TB0CCR0_L
     77          #pragma vector=TIMER0_B1_VECTOR

   \                                 In  segment ISR_CODE, align 2
     78          __interrupt void TIMER0_B1_ISR(void) {
   \                     TIMER0_B1_ISR:
   \   000000   0F12         PUSH.W  R15
     79          	//----------------------------------------------------------------------------
     80          	// TimerB0 1-2, Overflow Interrupt Vector (TBIV) handler
     81          	//----------------------------------------------------------------------------
     82          	switch (__even_in_range(TB0IV, 14)) {
   \   000002   1F42AE03     MOV.W   &0x3ae, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for TIMER0_B1_ISR>_0`:
   \   000008   593C         JMP     ??TIMER0_B1_ISR_1
   \   00000A   063C         JMP     ??TIMER0_B1_ISR_7
   \   00000C   463C         JMP     ??TIMER0_B1_ISR_8
   \   00000E   563C         JMP     ??TIMER0_B1_ISR_1
   \   000010   553C         JMP     ??TIMER0_B1_ISR_1
   \   000012   543C         JMP     ??TIMER0_B1_ISR_1
   \   000014   533C         JMP     ??TIMER0_B1_ISR_1
   \   000016   523C         JMP     ??TIMER0_B1_ISR_1
     83          	case 0:
     84          
     85          		break; // No interrupt
     86          	case 2: 
     87          		if (switch_one_debouncing) {
   \                     ??TIMER0_B1_ISR_7:
   \   000018   8293....     CMP.W   #0x0, &switch_one_debouncing
   \   00001C   1D24         JEQ     ??TIMER0_B1_ISR_2
     88          			switch_one_debounce_count++;
   \   00001E   9253....     ADD.W   #0x1, &switch_one_debounce_count
     89          			if (switch_one_debounce_count == DEBOUNCE_COUNT_LIMIT) {
   \   000022   B2901400.... CMP.W   #0x14, &switch_one_debounce_count
   \   000028   1720         JNE     ??TIMER0_B1_ISR_2
     90          				
     91          				switch_one_debouncing = RESET_STATE;
   \   00002A   8243....     MOV.W   #0x0, &switch_one_debouncing
     92          				switch_one_debounce_count = RESET_STATE;
   \   00002E   8243....     MOV.W   #0x0, &switch_one_debounce_count
     93          				P4IE |= SW1;
   \   000032   E2D33B02     BIS.B   #0x2, &0x23b
     94          
     95          
     96          
     97          				if (!switch_two_debouncing) {
   \   000036   8293....     CMP.W   #0x0, &switch_two_debouncing
   \   00003A   0E20         JNE     ??TIMER0_B1_ISR_2
     98          					TB0CCTL1 &= ~CCIE;
   \   00003C   B2C010008403 BIC.W   #0x10, &0x384
     99          					if (main_menu_active) {
   \   000042   C293....     CMP.B   #0x0, &main_menu_active
   \   000046   0624         JEQ     ??TIMER0_B1_ISR_4
    100          						display_state = old_display_state;
   \   000048   D242........ MOV.B   &old_display_state, &display_state
    101          						main_menu_active = RESET_STATE;
   \   00004E   C243....     MOV.B   #0x0, &main_menu_active
   \   000052   023C         JMP     ??TIMER0_B1_ISR_2
    102          					}
    103          					else {
    104          						main_menu_active = TRUE;
   \                     ??TIMER0_B1_ISR_4:
   \   000054   D243....     MOV.B   #0x1, &main_menu_active
    105          					}
    106          				}
    107          
    108          			}
    109          		}
    110          
    111          		if (switch_two_debouncing) {
   \                     ??TIMER0_B1_ISR_2:
   \   000058   8293....     CMP.W   #0x0, &switch_two_debouncing
   \   00005C   1A24         JEQ     ??TIMER0_B1_ISR_3
    112          			switch_two_debounce_count++;
   \   00005E   9253....     ADD.W   #0x1, &switch_two_debounce_count
    113          			if (switch_two_debounce_count == DEBOUNCE_COUNT_LIMIT) {
   \   000062   B2901400.... CMP.W   #0x14, &switch_two_debounce_count
   \   000068   1420         JNE     ??TIMER0_B1_ISR_3
    114          				switch_two_debouncing = RESET_STATE;
   \   00006A   8243....     MOV.W   #0x0, &switch_two_debouncing
    115          				switch_two_debounce_count = RESET_STATE;
   \   00006E   8243....     MOV.W   #0x0, &switch_two_debounce_count
    116          				P2IE |= SW2;
   \   000072   F2D21B02     BIS.B   #0x8, &0x21b
    117          
    118          
    119          				if (!switch_one_debouncing) {
   \   000076   8293....     CMP.W   #0x0, &switch_one_debouncing
   \   00007A   0B20         JNE     ??TIMER0_B1_ISR_3
    120          					TB0CCTL1 &= ~CCIE;
   \   00007C   B2C010008403 BIC.W   #0x10, &0x384
    121          					if (main_menu_active) {
   \   000082   C293....     CMP.B   #0x0, &main_menu_active
   \   000086   0324         JEQ     ??TIMER0_B1_ISR_5
    122          						main_menu_select = TRUE;
   \   000088   D243....     MOV.B   #0x1, &main_menu_select
   \   00008C   023C         JMP     ??TIMER0_B1_ISR_3
    123          					}
    124          					else {
    125          						main_menu_select = FALSE;
   \                     ??TIMER0_B1_ISR_5:
   \   00008E   C243....     MOV.B   #0x0, &main_menu_select
    126          					}
    127          				}
    128          			}
    129          		}
    130          
    131          		// ...... Add What you need happen in the interrupt ......
    132          		TB0CCR1 += TB0CCR0_INTERVAL; // Add Offset to TBCCR1
   \                     ??TIMER0_B1_ISR_3:
   \   000092   B250A8619403 ADD.W   #0x61a8, &0x394
    133          		break;
   \   000098   113C         JMP     ??TIMER0_B1_ISR_1
    134          	case 4: // CCR2 not used
    135          		display_update_count++;
   \                     ??TIMER0_B1_ISR_8:
   \   00009A   9253....     ADD.W   #0x1, &display_update_count
    136          		if (display_update_count == UPDATE_DISPLAY_LIMIT) {
   \   00009E   A292....     CMP.W   #0x4, &display_update_count
   \   0000A2   0920         JNE     ??TIMER0_B1_ISR_6
    137          			display_update_count = RESET_STATE;
   \   0000A4   8243....     MOV.W   #0x0, &display_update_count
    138          			if (display_changed) {
   \   0000A8   C293....     CMP.B   #0x0, &display_changed
   \   0000AC   0424         JEQ     ??TIMER0_B1_ISR_6
    139          				display_changed = FALSE;
   \   0000AE   C243....     MOV.B   #0x0, &display_changed
    140          				update_display = TRUE;
   \   0000B2   D243....     MOV.B   #0x1, &update_display
    141          			}
    142          		}
    143          
    144          		/*
    145          		transmit_pc_count++;
    146          		if (transmit_pc_count == ONE_SECOND) {
    147          			transmit_pc_count = RESET_STATE;
    148          			if (iot_char_received) {
    149          				iot_2_pc_transmit = TRUE; // Enable RX interrupt
    150          				iot_char_received = FALSE;
    151          			}
    152          			if (pc_char_received) {
    153          				pc_2_iot_transmit = TRUE;
    154          				pc_char_received = FALSE;
    155          			}
    156          		}
    157          		*/
    158          		// ...... Add What you need happen in the interrupt ......
    159          		TB0CCR2 += TB0CCR2_INTERVAL; // Add Offset to TBCCR2
   \                     ??TIMER0_B1_ISR_6:
   \   0000B6   B250A8619603 ADD.W   #0x61a8, &0x396
    160          		break;
    161          	case 14: // overflow
    162          		// ...... Add What you need happen in the interrupt ......
    163          			break;
    164          	default: break;
    165          	}
    166          	//----------------------------------------------------------------------------
    167          }
   \                     ??TIMER0_B1_ISR_1:
   \   0000BC   3F41         POP.W   R15
   \   0000BE   0013         RETI
   \   0000C0                REQUIRE _A_PBIE_L
   \   0000C0                REQUIRE _A_TB0CCTL1_L
   \   0000C0                REQUIRE _A_PAIE_L
   \   0000C0                REQUIRE _A_TB0CCR1_L
   \   0000C0                REQUIRE _A_TB0CCR2_L
   \   0000C0                REQUIRE _A_TB0IV_L
    168          
    169          #pragma vector = TIMER1_B0_VECTOR

   \                                 In  segment ISR_CODE, align 2
    170          __interrupt void Timer1_B0_ISR(void) {
   \                     Timer1_B0_ISR:
    171          	//------------------------------------------------------------------------------
    172          	// TimerB1 0 Interrupt handler
    173          	//----------------------------------------------------------------------------
    174          	// ...... Add What you need happen in the interrupt ......
    175          	// 10 msec timer for ADC
    176          
    177          	ADCCTL0 |= ADCSC;
   \   000000   92D30007     BIS.W   #0x1, &0x700
    178          	TB1CCR0 += TB1CCR0_INTERVAL;
   \   000004   B2508813D203 ADD.W   #0x1388, &0x3d2
    179          
    180          		//----------------------------------------------------------------------------
    181          }
   \   00000A   0013         RETI
   \   00000C                REQUIRE _A_ADCCTL0_L
   \   00000C                REQUIRE _A_TB1CCR0_L
    182          
    183          #pragma vector = TIMER1_B1_VECTOR

   \                                 In  segment ISR_CODE, align 2
    184          __interrupt void TIMER1_B1_ISR(void) {
   \                     TIMER1_B1_ISR:
   \   000000   0F12         PUSH.W  R15
    185          	//----------------------------------------------------------------------------
    186          	// TimerB1 1-2, Overflow Interrupt Vector (TBIV) handler
    187          	//----------------------------------------------------------------------------
    188          	switch (__even_in_range(TB1IV, 14)) {
   \   000002   1F42EE03     MOV.W   &0x3ee, R15
   \   000006   E00F         ADDA    R15, PC
   \                     `?<Jumptable for TIMER1_B1_ISR>_0`:
   \   000008   563C         JMP     ??TIMER1_B1_ISR_1
   \   00000A   063C         JMP     ??TIMER1_B1_ISR_9
   \   00000C   273C         JMP     ??TIMER1_B1_ISR_10
   \   00000E   533C         JMP     ??TIMER1_B1_ISR_1
   \   000010   523C         JMP     ??TIMER1_B1_ISR_1
   \   000012   513C         JMP     ??TIMER1_B1_ISR_1
   \   000014   503C         JMP     ??TIMER1_B1_ISR_1
   \   000016   4F3C         JMP     ??TIMER1_B1_ISR_1
    189          	case 0:
    190          
    191          		break; // No interrupt
    192          	case 2:
    193          		if (drive_distance > 0) {
   \                     ??TIMER1_B1_ISR_9:
   \   000018   8293....     CMP.W   #0x0, &drive_distance
   \   00001C   0324         JEQ     ??TIMER1_B1_ISR_4
    194          			drive_distance--;
   \   00001E   B253....     ADD.W   #0xffff, &drive_distance
   \   000022   183C         JMP     ??TIMER1_B1_ISR_2
    195          		}
    196          		else {
    197          			if (drive_state == 'M') {
   \                     ??TIMER1_B1_ISR_4:
   \   000024   F2904D00.... CMP.B   #0x4d, &drive_state
   \   00002A   0920         JNE     ??TIMER1_B1_ISR_5
    198          				display_state = IOT_COMMAND_DISPLAY;
   \   00002C   F2404300.... MOV.B   #0x43, &display_state
    199          				iot_command_active = RESET_STATE;
   \   000032   C243....     MOV.B   #0x0, &iot_command_active
    200          				TB1CCTL1 &= ~CCIE;
   \   000036   B2C01000C403 BIC.W   #0x10, &0x3c4
   \   00003C   0B3C         JMP     ??TIMER1_B1_ISR_2
    201          			}
    202          			else {
    203          				drive_state = NONE;
   \                     ??TIMER1_B1_ISR_5:
   \   00003E   F2404E00.... MOV.B   #0x4e, &drive_state
    204          				display_state = COURSE_COMMANDS_INACTIVE;
   \   000044   F2406E00.... MOV.B   #0x6e, &display_state
    205          				iot_command_active = RESET_STATE;
   \   00004A   C243....     MOV.B   #0x0, &iot_command_active
    206          				TB1CCTL1 &= ~CCIE;
   \   00004E   B2C01000C403 BIC.W   #0x10, &0x3c4
    207          			}
    208          		}
    209          		TB1CCR1 += TB1CCR0_INTERVAL; // Add Offset to TBCCR1
   \                     ??TIMER1_B1_ISR_2:
   \   000054   B2508813D403 ADD.W   #0x1388, &0x3d4
    210          		break;
   \   00005A   2D3C         JMP     ??TIMER1_B1_ISR_1
    211          	case 4: // CCR2 not used
    212          		if (SSID_received) {
   \                     ??TIMER1_B1_ISR_10:
   \   00005C   C293....     CMP.B   #0x0, &SSID_received
   \   000060   1024         JEQ     ??TIMER1_B1_ISR_3
    213          			if (timer1_B2_count < THREE_SECOND) {
   \   000062   B2903C00.... CMP.W   #0x3c, &timer1_B2_count
   \   000068   032C         JC      ??TIMER1_B1_ISR_6
    214          				timer1_B2_count++;
   \   00006A   9253....     ADD.W   #0x1, &timer1_B2_count
   \   00006E   093C         JMP     ??TIMER1_B1_ISR_3
    215          			}
    216          			else {
    217          				timer1_B2_count = RESET_STATE;
   \                     ??TIMER1_B1_ISR_6:
   \   000070   8243....     MOV.W   #0x0, &timer1_B2_count
    218          				SSID_received = FALSE;
   \   000074   C243....     MOV.B   #0x0, &SSID_received
    219          				send_nstcp = TRUE;
   \   000078   D243....     MOV.B   #0x1, &send_nstcp
    220          				TB1CCTL2 &= ~CCIE;
   \   00007C   B2C01000C603 BIC.W   #0x10, &0x3c6
    221          			}
    222          		}
    223          
    224          		if (course_timer_increment) {
   \                     ??TIMER1_B1_ISR_3:
   \   000082   C293....     CMP.B   #0x0, &course_timer_increment
   \   000086   1424         JEQ     ??TIMER1_B1_ISR_7
    225          			timer1_B2_count++;
   \   000088   9253....     ADD.W   #0x1, &timer1_B2_count
    226          			if (timer1_B2_count == TWO_HUNDRED_MSEC) {
   \   00008C   A292....     CMP.W   #0x4, &timer1_B2_count
   \   000090   0C20         JNE     ??TIMER1_B1_ISR_8
    227          				timer1_B2_count = RESET_STATE;
   \   000092   8243....     MOV.W   #0x0, &timer1_B2_count
    228          				course_timer_decimal_count = course_timer_decimal_count + 2;
   \   000096   A253....     ADD.W   #0x2, &course_timer_decimal_count
    229          				if (course_timer_decimal_count == TWO_HUNDRED_MSEC_MAX) {
   \   00009A   B2900A00.... CMP.W   #0xa, &course_timer_decimal_count
   \   0000A0   0420         JNE     ??TIMER1_B1_ISR_8
    230          					course_timer_decimal_count = RESET_STATE;
   \   0000A2   8243....     MOV.W   #0x0, &course_timer_decimal_count
    231          					course_timer_ones_count++;
   \   0000A6   9253....     ADD.W   #0x1, &course_timer_ones_count
    232          				}
    233          			}
    234          			display_state = old_display_state;
   \                     ??TIMER1_B1_ISR_8:
   \   0000AA   D242........ MOV.B   &old_display_state, &display_state
    235          		}
    236          		
    237          		TB1CCR2 += TB1CCR2_INTERVAL; // Add Offset to TBCCR2
   \                     ??TIMER1_B1_ISR_7:
   \   0000B0   B250A861D603 ADD.W   #0x61a8, &0x3d6
    238          		break;
    239          	case 14: // overflow
    240          		// ...... Add What you need happen in the interrupt ......
    241          		break;
    242          	default: break;
    243          	}
    244          }
   \                     ??TIMER1_B1_ISR_1:
   \   0000B6   3F41         POP.W   R15
   \   0000B8   0013         RETI
   \   0000BA                REQUIRE _A_TB1CCTL1_L
   \   0000BA                REQUIRE _A_TB1CCR1_L
   \   0000BA                REQUIRE _A_TB1CCTL2_L
   \   0000BA                REQUIRE _A_TB1CCR2_L
   \   0000BA                REQUIRE _A_TB1IV_L

   \                                 In  segment INTVEC, offset 0x50, root
   \                     `??TIMER1_B1_ISR::??INTVEC 80`:
   \   000050   ....         DC16    TIMER1_B1_ISR

   \                                 In  segment INTVEC, offset 0x52, root
   \                     `??Timer1_B0_ISR::??INTVEC 82`:
   \   000052   ....         DC16    Timer1_B0_ISR

   \                                 In  segment INTVEC, offset 0x54, root
   \                     `??TIMER0_B1_ISR::??INTVEC 84`:
   \   000054   ....         DC16    TIMER0_B1_ISR

   \                                 In  segment INTVEC, offset 0x56, root
   \                     `??Timer0_B0_ISR::??INTVEC 86`:
   \   000056   ....         DC16    Timer0_B0_ISR
    245          
    246          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      6   TIMER0_B1_ISR
      6   TIMER1_B1_ISR
      4   Timer0_B0_ISR
      4   Timer1_B0_ISR


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     192  TIMER0_B1_ISR
       2  TIMER0_B1_ISR::??INTVEC 84
     186  TIMER1_B1_ISR
       2  TIMER1_B1_ISR::??INTVEC 80
      38  Timer0_B0_ISR
       2  Timer0_B0_ISR::??INTVEC 86
      12  Timer1_B0_ISR
       2  Timer1_B0_ISR::??INTVEC 82
       2  _A_ADCCTL0_L
       2  _A_PAIE_L
       2  _A_PBIE_L
       2  _A_PCOUT_L
       2  _A_TB0CCR0_L
       2  _A_TB0CCR1_L
       2  _A_TB0CCR2_L
       2  _A_TB0CCTL0_L
       2  _A_TB0CCTL1_L
       2  _A_TB0IV_L
       2  _A_TB1CCR0_L
       2  _A_TB1CCR1_L
       2  _A_TB1CCR2_L
       2  _A_TB1CCTL1_L
       2  _A_TB1CCTL2_L
       2  _A_TB1IV_L
       2  course_timer_decimal_count
       2  course_timer_ones_count
       2  display_update_count
       2  timer1_B2_count
       2  timerB0_count
       2  timerB0_interrupt_count
       2  transmit_pc_count

 
  32 bytes in segment DATA16_AN
  14 bytes in segment DATA16_Z
   8 bytes in segment INTVEC
 428 bytes in segment ISR_CODE
 
 428 bytes of CODE  memory
   0 bytes of CONST memory (+  8 bytes shared)
  14 bytes of DATA  memory (+ 32 bytes shared)

Errors: none
Warnings: none
