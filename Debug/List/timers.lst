###############################################################################
#
# IAR C/C++ Compiler V7.20.1.997/W32 for MSP430           09/Dec/2020  16:55:35
# Copyright 1996-2020 IAR Systems AB.
# PC-locked license - IAR Embedded Workbench for MSP430, 8K KickStart Edition 7.20
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        C:\Users\19196\OneDrive\Documents\ECE 306 current\Project_09\timers.c
#    Command line  =  
#        -f C:\Users\19196\AppData\Local\Temp\EWCA91.tmp
#        ("C:\Users\19196\OneDrive\Documents\ECE 306
#        current\Project_09\timers.c" -lC
#        "C:\Users\19196\OneDrive\Documents\ECE 306
#        current\Project_09\Debug\List" -o
#        "C:\Users\19196\OneDrive\Documents\ECE 306
#        current\Project_09\Debug\Obj" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --debug -D__MSP430FR2355__ -e --double=32
#        --dlib_config "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.4\430\lib\dlib\dl430xlsfn.h" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.4\430\" --core=430X --data_model=small
#        -On --multiplier=32 --hw_workaround=CPU40 --code_model=large)
#    Locale        =  English_USA.1252
#    List file     =  
#        C:\Users\19196\OneDrive\Documents\ECE 306
#        current\Project_09\Debug\List\timers.lst
#    Object file   =  
#        C:\Users\19196\OneDrive\Documents\ECE 306
#        current\Project_09\Debug\Obj\timers.r43
#
###############################################################################

C:\Users\19196\OneDrive\Documents\ECE 306 current\Project_09\timers.c
      1          //------------------------------------------------------------------------------
      2          //
      3          //  Description: This file contains the Timer Configurations/Initializtions
      4          //
      5          //
      6          //  Cody Lane
      7          //  September 2020
      8          //  Built with IAR Embedded Workbench Version: V7.20.1 
      9          //------------------------------------------------------------------------------
     10          
     11          #include  "msp430.h"

   \                                 In  segment DATA16_AN, at 0x380
   \   union <unnamed> _A_TB0CTL_L
   \                     _A_TB0CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x382
   \   union <unnamed> _A_TB0CCTL0_L
   \                     _A_TB0CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x384
   \   union <unnamed> _A_TB0CCTL1_L
   \                     _A_TB0CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x386
   \   union <unnamed> _A_TB0CCTL2_L
   \                     _A_TB0CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x392
   \   union <unnamed> _A_TB0CCR0_L
   \                     _A_TB0CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x394
   \   union <unnamed> _A_TB0CCR1_L
   \                     _A_TB0CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x396
   \   union <unnamed> _A_TB0CCR2_L
   \                     _A_TB0CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3a0
   \   union <unnamed> _A_TB0EX0_L
   \                     _A_TB0EX0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c0
   \   union <unnamed> _A_TB1CTL_L
   \                     _A_TB1CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c2
   \   union <unnamed> _A_TB1CCTL0_L
   \                     _A_TB1CCTL0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c4
   \   union <unnamed> _A_TB1CCTL1_L
   \                     _A_TB1CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3c6
   \   union <unnamed> _A_TB1CCTL2_L
   \                     _A_TB1CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d2
   \   union <unnamed> _A_TB1CCR0_L
   \                     _A_TB1CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d4
   \   union <unnamed> _A_TB1CCR1_L
   \                     _A_TB1CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3d6
   \   union <unnamed> _A_TB1CCR2_L
   \                     _A_TB1CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x3e0
   \   union <unnamed> _A_TB1EX0_L
   \                     _A_TB1EX0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x440
   \   union <unnamed> _A_TB3CTL_L
   \                     _A_TB3CTL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x444
   \   union <unnamed> _A_TB3CCTL1_L
   \                     _A_TB3CCTL1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x446
   \   union <unnamed> _A_TB3CCTL2_L
   \                     _A_TB3CCTL2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x448
   \   union <unnamed> _A_TB3CCTL3_L
   \                     _A_TB3CCTL3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x44a
   \   union <unnamed> _A_TB3CCTL4_L
   \                     _A_TB3CCTL4_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x452
   \   union <unnamed> _A_TB3CCR0_L
   \                     _A_TB3CCR0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x454
   \   union <unnamed> _A_TB3CCR1_L
   \                     _A_TB3CCR1_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x456
   \   union <unnamed> _A_TB3CCR2_L
   \                     _A_TB3CCR2_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x458
   \   union <unnamed> _A_TB3CCR3_L
   \                     _A_TB3CCR3_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x45a
   \   union <unnamed> _A_TB3CCR4_L
   \                     _A_TB3CCR4_L:
   \   000000                DS8 2
     12          #include  "functions.h"
     13          #include <string.h>
     14          #include  "macros.h"
     15          
     16          //------------------------------------------------------------------------------
     17          // Timer B0 initialization sets up both B0_0, B0_1-B0_2 and overflow

   \                                 In  segment CODE, align 2
     18          void Init_Timer_B0(void) {
   \                     Init_Timer_B0:
     19          	TB0CTL = TBSSEL__SMCLK; // SMCLK source
   \   000000   B24000028003 MOV.W   #0x200, &0x380
     20          	TB0CTL |= TBCLR; // Resets TB0R, clock divider, count direction
   \   000006   A2D28003     BIS.W   #0x4, &0x380
     21          	TB0CTL |= MC__CONTINOUS; // Continuous up
   \   00000A   B2D020008003 BIS.W   #0x20, &0x380
     22          	TB0CTL |= ID__2; // Divide clock by 2
   \   000010   B2D040008003 BIS.W   #0x40, &0x380
     23          	TB0EX0 = TBIDEX__8; // Divide clock by an additional 8
   \   000016   B2400700A003 MOV.W   #0x7, &0x3a0
     24          	TB0CCR0 = TB0CCR0_INTERVAL; // CCR0
   \   00001C   B240A8619203 MOV.W   #0x61a8, &0x392
     25          	TB0CCTL0 &= ~CCIE; // CCR0 enable interrupt
   \   000022   B2C010008203 BIC.W   #0x10, &0x382
     26          	TB0CCR1 = TB0CCR1_INTERVAL; // CCR1
   \   000028   B240A8619403 MOV.W   #0x61a8, &0x394
     27          	TB0CCTL1 |= CCIE; // CCR1 enable interrupt
   \   00002E   B2D010008403 BIS.W   #0x10, &0x384
     28          	TB0CCR2 = TB0CCR2_INTERVAL; // CCR2
   \   000034   B240A8619603 MOV.W   #0x61a8, &0x396
     29          	TB0CCTL2 |= CCIE; // CCR2 enable interrupt
   \   00003A   B2D010008603 BIS.W   #0x10, &0x386
     30          	TB0CTL &= ~TBIE; // Disable Overflow Interrupt
   \   000040   A2C38003     BIC.W   #0x2, &0x380
     31          	TB0CTL &= ~TBIFG; // Clear Overflow Interrupt flag
   \   000044   92C38003     BIC.W   #0x1, &0x380
     32          }
   \   000048   1001         RETA
   \   00004A                REQUIRE _A_TB0CTL_L
   \   00004A                REQUIRE _A_TB0EX0_L
   \   00004A                REQUIRE _A_TB0CCR0_L
   \   00004A                REQUIRE _A_TB0CCTL0_L
   \   00004A                REQUIRE _A_TB0CCR1_L
   \   00004A                REQUIRE _A_TB0CCTL1_L
   \   00004A                REQUIRE _A_TB0CCR2_L
   \   00004A                REQUIRE _A_TB0CCTL2_L
     33          

   \                                 In  segment CODE, align 2
     34          void Init_Timer_B1(void) {
   \                     Init_Timer_B1:
     35          	TB1CTL = TBSSEL__SMCLK; // SMCLK source
   \   000000   B2400002C003 MOV.W   #0x200, &0x3c0
     36          	TB1CTL |= TBCLR; // Resets TB0R, clock divider, count direction
   \   000006   A2D2C003     BIS.W   #0x4, &0x3c0
     37          	TB1CTL |= MC__CONTINOUS; // Continuous up
   \   00000A   B2D02000C003 BIS.W   #0x20, &0x3c0
     38          	TB1CTL |= ID__2; // Divide clock by 2
   \   000010   B2D04000C003 BIS.W   #0x40, &0x3c0
     39          	TB1EX0 = TBIDEX__8; // Divide clock by an additional 8
   \   000016   B2400700E003 MOV.W   #0x7, &0x3e0
     40          	TB1CCR0 = TB1CCR0_INTERVAL; // CCR0
   \   00001C   B2408813D203 MOV.W   #0x1388, &0x3d2
     41          	TB1CCTL0 |= CCIE; // CCR0 enable interrupt
   \   000022   B2D01000C203 BIS.W   #0x10, &0x3c2
     42          	TB1CCR1 = TB1CCR1_INTERVAL; // CCR1
   \   000028   B2408813D403 MOV.W   #0x1388, &0x3d4
     43          	TB1CCTL1 &= ~CCIE; // CCR1 enable interrupt
   \   00002E   B2C01000C403 BIC.W   #0x10, &0x3c4
     44          	TB1CCR2 = TB1CCR2_INTERVAL; // CCR2
   \   000034   B2408813D603 MOV.W   #0x1388, &0x3d6
     45          	TB1CCTL2 &= ~CCIE; // CCR2 enable interrupt
   \   00003A   B2C01000C603 BIC.W   #0x10, &0x3c6
     46          	TB1CTL &= ~TBIE; // Disable Overflow Interrupt
   \   000040   A2C3C003     BIC.W   #0x2, &0x3c0
     47          	TB1CTL &= ~TBIFG; // Clear Overflow Interrupt flag
   \   000044   92C3C003     BIC.W   #0x1, &0x3c0
     48          }
   \   000048   1001         RETA
   \   00004A                REQUIRE _A_TB1CTL_L
   \   00004A                REQUIRE _A_TB1EX0_L
   \   00004A                REQUIRE _A_TB1CCR0_L
   \   00004A                REQUIRE _A_TB1CCTL0_L
   \   00004A                REQUIRE _A_TB1CCR1_L
   \   00004A                REQUIRE _A_TB1CCTL1_L
   \   00004A                REQUIRE _A_TB1CCR2_L
   \   00004A                REQUIRE _A_TB1CCTL2_L
     49          

   \                                 In  segment CODE, align 2
     50          void Init_Timer_B3(void) {
   \                     Init_Timer_B3:
     51          	//------------------------------------------------------------------------------
     52          // SMCLK source, up count mode, PWM Right Side
     53          // TB3.1 P6.0 R_FORWARD
     54          // TB3.2 P6.1 L_FORWARD
     55          // TB3.3 P6.2 R_REVERSE
     56          // TB3.4 P6.3 L_REVERSE
     57          //------------------------------------------------------------------------------
     58          	TB3CTL = TBSSEL__SMCLK; // SMCLK
   \   000000   B24000024004 MOV.W   #0x200, &0x440
     59          	TB3CTL |= MC__UP; // Up Mode
   \   000006   B2D010004004 BIS.W   #0x10, &0x440
     60          	TB3CTL |= TBCLR; // Clear TAR
   \   00000C   A2D24004     BIS.W   #0x4, &0x440
     61          	TB3CCR0 = WHEEL_PERIOD; // PWM Period
   \   000010   B240E8FD5204 MOV.W   #0xfde8, &0x452
     62          	TB3CCTL1 = OUTMOD_7; // CCR1 reset/set
   \   000016   B240E0004404 MOV.W   #0xe0, &0x444
     63          	RIGHT_FORWARD_SPEED = WHEEL_OFF; // P6.0 Right Forward PWM duty cycle
   \   00001C   82435404     MOV.W   #0x0, &0x454
     64          	TB3CCTL2 = OUTMOD_7; // CCR2 reset/set
   \   000020   B240E0004604 MOV.W   #0xe0, &0x446
     65          	LEFT_FORWARD_SPEED = WHEEL_OFF; // P6.1 Left Forward PWM duty cycle
   \   000026   82435604     MOV.W   #0x0, &0x456
     66          	TB3CCTL3 = OUTMOD_7; // CCR3 reset/set
   \   00002A   B240E0004804 MOV.W   #0xe0, &0x448
     67          	RIGHT_REVERSE_SPEED = WHEEL_OFF; // P6.2 Right Reverse PWM duty cycle
   \   000030   82435804     MOV.W   #0x0, &0x458
     68          	TB3CCTL4 = OUTMOD_7; // CCR4 reset/set
   \   000034   B240E0004A04 MOV.W   #0xe0, &0x44a
     69          	LEFT_REVERSE_SPEED = WHEEL_OFF; // P6.3 Left Reverse PWM duty cycle
   \   00003A   82435A04     MOV.W   #0x0, &0x45a
     70             //------------------------------------------------------------------------------
     71          
     72          
     73          }
   \   00003E   1001         RETA
   \   000040                REQUIRE _A_TB3CTL_L
   \   000040                REQUIRE _A_TB3CCR0_L
   \   000040                REQUIRE _A_TB3CCTL1_L
   \   000040                REQUIRE _A_TB3CCR1_L
   \   000040                REQUIRE _A_TB3CCTL2_L
   \   000040                REQUIRE _A_TB3CCR2_L
   \   000040                REQUIRE _A_TB3CCTL3_L
   \   000040                REQUIRE _A_TB3CCR3_L
   \   000040                REQUIRE _A_TB3CCTL4_L
   \   000040                REQUIRE _A_TB3CCR4_L
     74          

   \                                 In  segment CODE, align 2
     75          void Init_Timers(void) {
   \                     Init_Timers:
     76          	Init_Timer_B0();
   \   000000   ........     CALLA   #Init_Timer_B0
     77          	Init_Timer_B1();
   \   000004   ........     CALLA   #Init_Timer_B1
     78          	Init_Timer_B3();
   \   000008   ........     CALLA   #Init_Timer_B3
     79          }
   \   00000C   1001         RETA

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   Init_Timer_B0
      4   Init_Timer_B1
      4   Init_Timer_B3
      4   Init_Timers
        4   -> Init_Timer_B0
        4   -> Init_Timer_B1
        4   -> Init_Timer_B3


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      74  Init_Timer_B0
      74  Init_Timer_B1
      64  Init_Timer_B3
      14  Init_Timers
       2  _A_TB0CCR0_L
       2  _A_TB0CCR1_L
       2  _A_TB0CCR2_L
       2  _A_TB0CCTL0_L
       2  _A_TB0CCTL1_L
       2  _A_TB0CCTL2_L
       2  _A_TB0CTL_L
       2  _A_TB0EX0_L
       2  _A_TB1CCR0_L
       2  _A_TB1CCR1_L
       2  _A_TB1CCR2_L
       2  _A_TB1CCTL0_L
       2  _A_TB1CCTL1_L
       2  _A_TB1CCTL2_L
       2  _A_TB1CTL_L
       2  _A_TB1EX0_L
       2  _A_TB3CCR0_L
       2  _A_TB3CCR1_L
       2  _A_TB3CCR2_L
       2  _A_TB3CCR3_L
       2  _A_TB3CCR4_L
       2  _A_TB3CCTL1_L
       2  _A_TB3CCTL2_L
       2  _A_TB3CCTL3_L
       2  _A_TB3CCTL4_L
       2  _A_TB3CTL_L

 
 226 bytes in segment CODE
  52 bytes in segment DATA16_AN
 
 226 bytes of CODE memory
   0 bytes of DATA memory (+ 52 bytes shared)

Errors: none
Warnings: none
